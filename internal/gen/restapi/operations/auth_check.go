// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AuthCheckHandlerFunc turns a function with the right signature into a auth check handler
type AuthCheckHandlerFunc func(AuthCheckParams) middleware.Responder

// Handle executing the request and returning a response
func (fn AuthCheckHandlerFunc) Handle(params AuthCheckParams) middleware.Responder {
	return fn(params)
}

// AuthCheckHandler interface for that can handle valid auth check params
type AuthCheckHandler interface {
	Handle(AuthCheckParams) middleware.Responder
}

// NewAuthCheck creates a new http.Handler for the auth check operation
func NewAuthCheck(ctx *middleware.Context, handler AuthCheckHandler) *AuthCheck {
	return &AuthCheck{Context: ctx, Handler: handler}
}

/* AuthCheck swagger:route GET /auth authCheck

Attempted authorizations

*/
type AuthCheck struct {
	Context *middleware.Context
	Handler AuthCheckHandler
}

func (o *AuthCheck) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewAuthCheckParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// AuthCheckBody auth check body
//
// swagger:model AuthCheckBody
type AuthCheckBody struct {

	// ip
	// Required: true
	IP *string `json:"ip"`

	// login
	// Required: true
	Login *string `json:"login"`

	// password
	// Required: true
	Password *string `json:"password"`
}

// Validate validates this auth check body
func (o *AuthCheckBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateIP(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLogin(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePassword(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AuthCheckBody) validateIP(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"ip", "body", o.IP); err != nil {
		return err
	}

	return nil
}

func (o *AuthCheckBody) validateLogin(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"login", "body", o.Login); err != nil {
		return err
	}

	return nil
}

func (o *AuthCheckBody) validatePassword(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"password", "body", o.Password); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this auth check body based on context it is used
func (o *AuthCheckBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AuthCheckBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AuthCheckBody) UnmarshalBinary(b []byte) error {
	var res AuthCheckBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// AuthCheckInternalServerErrorBody auth check internal server error body
//
// swagger:model AuthCheckInternalServerErrorBody
type AuthCheckInternalServerErrorBody struct {

	// error
	Error string `json:"error,omitempty"`

	// passed
	Passed bool `json:"passed,omitempty"`
}

// Validate validates this auth check internal server error body
func (o *AuthCheckInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this auth check internal server error body based on context it is used
func (o *AuthCheckInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AuthCheckInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AuthCheckInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res AuthCheckInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// AuthCheckOKBody auth check o k body
//
// swagger:model AuthCheckOKBody
type AuthCheckOKBody struct {

	// passed
	Passed bool `json:"passed,omitempty"`
}

// Validate validates this auth check o k body
func (o *AuthCheckOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this auth check o k body based on context it is used
func (o *AuthCheckOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AuthCheckOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AuthCheckOKBody) UnmarshalBinary(b []byte) error {
	var res AuthCheckOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
