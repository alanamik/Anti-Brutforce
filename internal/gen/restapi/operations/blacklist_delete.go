// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BlacklistDeleteHandlerFunc turns a function with the right signature into a blacklist delete handler
type BlacklistDeleteHandlerFunc func(BlacklistDeleteParams) middleware.Responder

// Handle executing the request and returning a response
func (fn BlacklistDeleteHandlerFunc) Handle(params BlacklistDeleteParams) middleware.Responder {
	return fn(params)
}

// BlacklistDeleteHandler interface for that can handle valid blacklist delete params
type BlacklistDeleteHandler interface {
	Handle(BlacklistDeleteParams) middleware.Responder
}

// NewBlacklistDelete creates a new http.Handler for the blacklist delete operation
func NewBlacklistDelete(ctx *middleware.Context, handler BlacklistDeleteHandler) *BlacklistDelete {
	return &BlacklistDelete{Context: ctx, Handler: handler}
}

/* BlacklistDelete swagger:route DELETE /blacklist blacklistDelete

Request to delete IP from blacklist

*/
type BlacklistDelete struct {
	Context *middleware.Context
	Handler BlacklistDeleteHandler
}

func (o *BlacklistDelete) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewBlacklistDeleteParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// BlacklistDeleteBody blacklist delete body
//
// swagger:model BlacklistDeleteBody
type BlacklistDeleteBody struct {

	// ip
	// Required: true
	IP *string `json:"ip"`
}

// Validate validates this blacklist delete body
func (o *BlacklistDeleteBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateIP(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *BlacklistDeleteBody) validateIP(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"ip", "body", o.IP); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this blacklist delete body based on context it is used
func (o *BlacklistDeleteBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *BlacklistDeleteBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *BlacklistDeleteBody) UnmarshalBinary(b []byte) error {
	var res BlacklistDeleteBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
